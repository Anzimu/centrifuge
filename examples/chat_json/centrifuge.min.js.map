{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap 6dd89c1548d27b8d62ec","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_subs","_lastPubUID","_messages","_isBatching","_isAuthBatching","_authChannels","_numRefreshFailed","_refreshTimeout","_pingInterval","_pongTimeout","_retries","_callbacks","_latency","_latencyStart","_connectData","_credentials","_config","debug","sockjs","promise","retry","maxRetry","timeout","resubscribe","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","authEndpoint","authHeaders","authParams","onAuth","_configure","credentials","data","params","headers","callback","_this2","query","_debug","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","JSON","parse","responseText","e","_log","setTimeout","send","stringify","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","assign","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","reconnect","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_unsubscribedAt","Date","_setSubscribing","_setUnsubscribed","commands","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","transport","onheartbeat","_restartPing","_resetRetry","msg","_call","then","result","_connectResponse","decodeCommandResult","CONNECT","_disconnect","onerror","error","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_connect","onmessage","replies","decodeReplies","_dispatchReply","_this4","method","RPC","SEND","_callAsync","_addMessage","_this5","Promise","resolve","reject","_registerCall","isConnected","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this6","_refreshFailed","cb","Math","round","random","_refresh","user","exp","info","sign","REFRESH","_refreshResponse","context","_ajax","_this7","_setNew","SUBSCRIBE","startAuthBatching","_subscribe","stopAuthBatching","_recover","recover","last","_getLastID","away","_getAway","_subscribeResponse","err","_subscribeError","UNSUBSCRIBE","_getSub","_this8","getTime","expires","expired","client","ttl","startBatching","_shouldResubscribe","stopBatching","ctx","latency","clearInterval","_this9","setInterval","_stopPing","_startPing","_isSubscribing","code","message","_setSubscribeError","recovered","_setSubscribeSuccess","pubs","publications","reverse","_handlePublication","reply","errorExists","join","leave","unsubscribe","pub","uid","_this10","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","_handleReply","_handlePush","messages","slice","_transportSend","PING","lastUID","_this11","isFunction","async","_nextMessageId","_isConnected","_ping","flush","_flush","_this12","authChannels","channels","batch","_ret","channelResponse","body","events","isString","currentSub","_setEvents","_isUnsubscribed","subscribe","11","_STATE_NEW","Subscription","centrifuge","_centrifuge","_error","_isResubscribe","_recovered","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_resolve","_reject","now","on","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","errContext","_getSubscribeErrorContext","noResubscribe","needTrigger","isResubscribe","subscribeErrorContext","_unsubscribe","_methodCall","PUBLISH","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","EventEmitter","_maxListeners","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","handler","len","args","listeners","Array","apply","addListener","listener","newListener","warned","console","trace","once","removeListener","fired","list","position","splice","removeAllListeners","listenerCount","evlistener","emitter","7","prefix","lastIndexOf","String","level","logger","step","min","max","jitter","pow","floor"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,gBAAAH,GACA,gBAAAC,SACAA,QAAA,WAAAD,IAEAD,EAAA,WAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,MDgBMC,GACA,SAAU/B,EAAQD,EAASO,GAEjC,cAC4B,SAAS0B,GAuBrC,QAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIV,WAAaU,GAAQC,QAASD,GAEvF,QAASE,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BrC,EAAMQ,GAAQ,IAAKR,EAAQ,KAAM,IAAIsC,gBAAe,4DAAgE,QAAO9B,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BR,EAAPQ,EAElO,QAAS+B,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIL,WAAU,iEAAoEK,GAAeD,GAAShB,UAAYT,OAAO2B,OAAOD,GAAcA,EAAWjB,WAAamB,aAAeC,MAAOJ,EAAUtB,YAAY,EAAO2B,UAAU,EAAM5B,cAAc,KAAewB,IAAY1B,OAAO+B,eAAiB/B,OAAO+B,eAAeN,EAAUC,GAAcD,EAASO,UAAYN,GA3Bje1B,OAAOC,eAAepB,EAAS,cAC7BgD,OAAO,IAEThD,EAAQoD,eAAaC,EAErB,IAAIC,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUrB,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXoB,SAAyBpB,EAAIY,cAAgBQ,QAAUpB,IAAQoB,OAAO3B,UAAY,eAAkBO,IAElQsB,EAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIlD,GAAI,EAAGA,EAAIkD,EAAMC,OAAQnD,IAAK,CAAE,GAAIoD,GAAaF,EAAMlD,EAAIoD,GAAWxC,WAAawC,EAAWxC,aAAc,EAAOwC,EAAWzC,cAAe,EAAU,SAAWyC,KAAYA,EAAWb,UAAW,GAAM9B,OAAOC,eAAeuC,EAAQG,EAAWC,IAAKD,IAAiB,MAAO,UAAUvB,EAAayB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBnB,EAAYX,UAAWoC,GAAiBC,GAAaP,EAAiBnB,EAAa0B,GAAqB1B,ME1FhiB2B,EAAA3D,EAAA,GF8FI4D,EAAWjC,EAAuBgC,GE7FtCE,EAAA7D,EAAA,IFiGI8D,EAAiBnC,EAAuBkC,GE/F5CE,EAAA/D,EAAA,IAOAgE,EAAAhE,EAAA,EFwGiBP,GE7FJoD,WF6FyB,SAAUoB,GE3F9C,QAAApB,GAAYqB,EAAKC,GAASrC,EAAAhC,KAAA+C,EAAA,IAAAuB,GAAAlC,EAAApC,MAAA+C,EAAAD,WAAAhC,OAAAyD,eAAAxB,IAAAxC,KAAAP,MAAA,OAExBsE,GAAKE,KAAOJ,EACZE,EAAKG,QAAU,KACfH,EAAKI,WAAY,EACjBJ,EAAKK,SAAU,EACfL,EAAKM,YAAc,KACnBN,EAAKO,UAAY,KACjBP,EAAKQ,SAAW,KAChBR,EAAKS,SAAW,KAChBT,EAAKU,QAAU,eACfV,EAAKW,YAAa,EAClBX,EAAKY,eAAgB,EACrBZ,EAAKa,WAAa,KAClBb,EAAKc,eAAiB,KACtBd,EAAKe,kBAAmB,EACxBf,EAAKgB,WAAa,EAClBhB,EAAKiB,UAAY,KACjBjB,EAAKkB,SACLlB,EAAKmB,eACLnB,EAAKoB,aACLpB,EAAKqB,aAAc,EACnBrB,EAAKsB,iBAAkB,EACvBtB,EAAKuB,iBACLvB,EAAKwB,kBAAoB,EACzBxB,EAAKyB,gBAAkB,KACvBzB,EAAK0B,cAAgB,KACrB1B,EAAK2B,aAAe,KACpB3B,EAAK4B,SAAW,EAChB5B,EAAK6B,cACL7B,EAAK8B,SAAW,KAChB9B,EAAK+B,cAAgB,KACrB/B,EAAKgC,aAAe,KACpBhC,EAAKiC,aAAe,KACpBjC,EAAKkC,SACHC,OAAO,EACPC,OAAQ,KACRC,QAAS,KACTC,MAAO,IACPC,SAAU,IACVC,QAAS,IACTC,aAAa,EACbC,MAAM,EACNC,aAAc,IACdC,gBAAiB,IACjBC,qBAAsB,IACtBC,iBAAkB,KAClBC,aAAc,KACdC,kBACE,YACA,gBACA,gBACA,cACA,qBACA,kBACA,cACA,cACA,qBACA,iBAEFC,gBAAiB,sBACjBC,kBACAC,iBACAC,eACAC,gBAAiB,KACjBC,gBAAiB,IACjBC,gBAAiB,KACjBC,UAAW,KACXC,aAAc,mBACdC,eACAC,cACAC,OAAQ,MAEV5D,EAAK6D,WAAW9D,GAzEQC,EFg2C1B,MApwCAhC,GAAUS,EAAYoB,GAuEtBf,EAAaL,IACXW,IAAK,iBACLf,MAAO,SEzFMyF,GACbpI,KAAKuG,aAAe6B,KF4FpB1E,IAAK,iBACLf,MAAO,SE1FM0F,GACbrI,KAAKsG,aAAe+B,KF6FpB3E,IAAK,QACLf,MAAO,SE3FHyB,EAAKkE,EAAQC,EAASF,EAAMG,GAAU,GAAAC,GAAAzI,KACtC0I,EAAQ,EAEZ1I,MAAK2I,OAAO,0BAA2BvE,EAEvC,IAAMwE,GAAOhH,EAAOiH,eAAiB,GAAIjH,GAAOiH,eAAmB,GAAIjH,GAAOkH,cAAc,oBAE5F,KAAK,GAAMzI,KAAKiI,GACVA,EAAO9G,eAAenB,KACpBqI,EAAMlF,OAAS,IACjBkF,GAAS,KAEXA,GAASK,mBAAmB1I,GAAK,IAAM0I,mBAAmBT,EAAOjI,IAGjEqI,GAAMlF,OAAS,IACjBkF,EAAQ,IAAMA,GAEhBE,EAAII,KAAK,OAAQ5E,EAAMsE,GAAO,GAC1B,mBAAqBE,KACvBA,EAAIK,iBAAkB,GAGxBL,EAAIM,iBAAiB,mBAAoB,kBACzCN,EAAIM,iBAAiB,eAAgB,mBACrC,KAAK,GAAMC,KAAcZ,GACnBA,EAAQ/G,eAAe2H,IACzBP,EAAIM,iBAAiBC,EAAYZ,EAAQY,GAyB7C,OArBAP,GAAIQ,mBAAqB,WACvB,GAAuB,IAAnBR,EAAIS,WACN,GAAmB,MAAfT,EAAIU,OAAgB,CACtB,GAAIjB,UAAMkB,GAAS,CACnB,KACElB,EAAOmB,KAAKC,MAAMb,EAAIc,cACtBH,GAAS,EACT,MAAOI,GACPnB,GAAS,EAAM,iEAAmEI,EAAIc,cAEpFH,GACFf,GAAS,EAAOH,OAGlBI,GAAKmB,KAAK,0CAA2ChB,EAAIU,QACzDd,GAAS,EAAMI,EAAIU,SAKzBO,WAAW,iBAAMjB,GAAIkB,KAAKN,KAAKO,UAAU1B,KAAQ,IAC1CO,KFoGPlF,IAAK,OACLf,MAAO,YEjGP,EAAAuB,EAAA8F,KAAI,OAAQC,cFqGZvG,IAAK,SACLf,MAAO,YElGoB,IAAvB3C,KAAKwG,QAAQC,QACf,EAAAvC,EAAA8F,KAAI,QAASC,cFuGfvG,IAAK,sBACLf,MAAO,WEnGP,QAA8B,kBAAduH,YAAiD,YAArB,mBAAOA,WAAP,YAAAjH,EAAOiH,gBFuGnDxG,IAAK,aACLf,MAAO,SErGEwH,GACT,IAAInK,KAAKoK,gBAAgBD,GAAzB,CAGA,GAAe,aAAXA,EACF,KAAM,IAAIE,OAAM,4EAElBrK,MAAK2E,SAAU,EACf3E,KAAK4E,YAALX,EAAAqG,eACAtK,KAAK6E,UAALZ,EAAAsG,aACAvK,KAAK8E,SAAW,GAAAb,GAAAuG,YAChBxK,KAAK+E,SAAW,GAAAd,GAAAwG,gBFwGhB/G,IAAK,kBACLf,MAAO,SEtGOwH,GACd,OAAO,KFyGPzG,IAAK,aACLf,MAAO,SEvGE+H,GACT,KAAM,WAAa9I,IACjB,KAAM,IAAIyI,OAAM,4BAMlB,IAHAvJ,OAAO6J,OAAO3K,KAAKwG,QAASkE,OAC5B1K,KAAK2I,OAAO,oBAAqB3I,KAAKwG,UAEjCxG,KAAKwE,KACR,KAAM,IAAI6F,OAAM,eASlB,KANI,EAAAnG,EAAA0G,YAAW5K,KAAKwE,KAAM,OAASxE,KAAKwE,KAAKqG,QAAQ,oBAAsB,EACzE7K,KAAK8K,WAAW,YAEhB9K,KAAK8K,WAAW,SAGd,EAAA5G,EAAA0G,YAAW5K,KAAKwE,KAAM,QAExB,GADAxE,KAAK2I,OAAO,iDACgB,OAAxB3I,KAAKwG,QAAQE,OACf1G,KAAK2I,OAAO,yCACZ3I,KAAKyE,QAAUzE,KAAKwG,QAAQE,WACvB,CACL,OAA6B,KAAlB9E,EAAOmJ,OAChB,KAAM,IAAIV,OAAM,uDAElBrK,MAAK2I,OAAO,+BACZ3I,KAAKyE,QAAU7C,EAAOmJ,WAGxB/K,MAAK2I,OAAO,gDF2GdjF,IAAK,aACLf,MAAO,SExGEqI,GACLhL,KAAKgF,UAAYgG,IACnBhL,KAAK2I,OAAO,SAAU3I,KAAKgF,QAAS,KAAMgG,GAC1ChL,KAAKgF,QAAUgG,MF4GjBtH,IAAK,kBACLf,MAAO,WExGP,MAAwB,iBAAjB3C,KAAKgF,WF4GZtB,IAAK,gBACLf,MAAO,WEzGP,MAAwB,eAAjB3C,KAAKgF,WF6GZtB,IAAK,eACLf,MAAO,WE1GP,MAAwB,cAAjB3C,KAAKgF,WF8GZtB,IAAK,iBACLf,MAAO,WE3GP,QAAS3C,KAAKsF,cF+Gd5B,IAAK,cACLf,MAAO,WE5GP3C,KAAK2I,OAAO,4BACZ3I,KAAKkG,SAAW,KFgHhBxC,IAAK,oBACLf,MAAO,WE7GP,GAAMsI,IAAW,EAAA/G,EAAAgH,SAAQlL,KAAKkG,SAAUlG,KAAKwG,QAAQI,MAAO5G,KAAKwG,QAAQK,SAGzE,OADA7G,MAAKkG,UAAY,EACV+E,KFiHPvH,IAAK,uBACLf,MAAO,SE/GYwI,GACnBnL,KAAKuF,UAAY,IAGjB,KAAK,GAAM6F,KAAMpL,MAAKmG,WACpB,GAAInG,KAAKmG,WAAW3E,eAAe4J,GAAK,CACtC,GAAMC,GAAYrL,KAAKmG,WAAWiF,EAClCE,cAAaD,EAAUvE,QACvB,IAAMyE,GAAUF,EAAUE,OAC1B,KAAKA,EACH,QAEFA,GAAQvL,KAAKwL,mBAAmB,iBAGpCxL,KAAKmG,aAGL,KAAK,GAAMsF,KAAWzL,MAAKwF,MACzB,GAAIxF,KAAKwF,MAAMhE,eAAeiK,GAAU,CACtC,GAAMC,GAAM1L,KAAKwF,MAAMiG,EAEnBN,IACEO,EAAIC,eACND,EAAIE,sBACJF,EAAIG,gBAAkB,GAAIC,OAE5BJ,EAAIK,mBAEJL,EAAIM,mBAKLhM,KAAKwG,QAAQO,aAAgB/G,KAAKiF,aAErCjF,KAAKwF,aFmHP9B,IAAK,iBACLf,MAAO,SEhHMsJ,GACb,GAAKA,EAASzI,OAAd,CAGA,IAAKxD,KAAKmF,WACR,KAAM,IAAIkF,OAAM,0BAElBrK,MAAKmF,WAAW2E,KAAK9J,KAAK8E,SAASoH,eAAeD,QFmHlDvI,IAAK,kBACLf,MAAO,WEjHS,GAAAwJ,GAAAnM,IAIhB,IAHAA,KAAK0E,WAAY,EAGI,OAAjB1E,KAAKyE,QAAkB,CACzB,GAAM2H,IACJC,WAAYrM,KAAKwG,QAAQc,iBAGO,QAA9BtH,KAAKwG,QAAQa,eACf+E,EAAcE,OAAStM,KAAKwG,QAAQa,cAEtCrH,KAAK0E,WAAY,EACjB1E,KAAKmF,WAAa,GAAInF,MAAKyE,QAAQzE,KAAKwE,KAAM,KAAM4H,OAC/C,CACL,IAAKpM,KAAKuM,sBAER,WADAvM,MAAK2I,OAAO,iEAGd3I,MAAKmF,WAAa,GAAI+E,WAAUlK,KAAKwE,OAChB,IAAjBxE,KAAK2E,UACP3E,KAAKmF,WAAWqH,WAAa,eAIjCxM,KAAKmF,WAAWsH,OAAS,WACvBN,EAAK9G,kBAAmB,EACxB8G,EAAKjH,eAAgB,EACjBiH,EAAKzH,WACPyH,EAAK/G,eAAiB,UAAY+G,EAAKhH,WAAWuH,UAClDP,EAAKhH,WAAWwH,YAAc,iBAAMR,GAAKS,iBAEzCT,EAAK/G,eAAiB,YAGxB+G,EAAKU,aAGL,IAAMC,OAIFX,EAAK5F,cAAgB4F,EAAK7F,gBAC5BwG,EAAIxE,WAGF6D,EAAK5F,eACPuG,EAAIxE,OAAOF,YAAc+D,EAAK5F,cAG5B4F,EAAK7F,eACPwG,EAAIxE,OAAOD,KAAO8D,EAAK7F,cAGzB6F,EAAK9F,cAAgB,GAAIyF,MACzBK,EAAKY,MAAMD,GAAKE,KAAK,SAAAC,GACnBd,EAAKe,iBAAiBf,EAAKpH,SAASoI,oBAAoBhB,EAAKvH,YAAYwI,QAASH,KACjF,WACDd,EAAKkB,YAAY,iBAAiB,MAItCrN,KAAKmF,WAAWmI,QAAU,SAAAC,GACxBpB,EAAKxD,OAAO,wBAAyB4E,IAGvCvN,KAAKmF,WAAWqI,QAAU,SAAAC,GACxBtB,EAAK9G,kBAAmB,CACxB,IAAIqI,GAAS,oBACTC,GAAgB,CAEpB,IAAIF,GAAc,UAAYA,IAAcA,EAAWC,OACrD,IACE,GAAME,GAASpE,KAAKC,MAAMgE,EAAWC,OAErCvB,GAAKxD,OAAO,6BAA8BiF,GAC1CF,EAASE,EAAOF,OAChBC,EAAgBC,EAAOzC,UACvB,MAAOxB,GACP+D,EAASD,EAAWC,OACpBvB,EAAKxD,OAAO,2BAA4B+E,GACxCC,EAA2B,eAAXD,EAkBpB,GAVsC,OAAlCvB,EAAK3F,QAAQY,kBACf+E,EAAK3F,QAAQY,kBACXyG,MAAOJ,EACPC,OAAQA,EACRvC,UAAWwC,IAIfxB,EAAKkB,YAAYK,EAAQC,IAED,IAApBxB,EAAKlH,WAAqB,CAC5BkH,EAAKjH,eAAgB,CACrB,IAAM+F,GAAWkB,EAAK2B,mBAEtB3B,GAAKxD,OAAO,mBAAqBsC,EAAW,iBAC5CpB,WAAW,YACe,IAApBsC,EAAKlH,YACPkH,EAAK4B,YAEN9C,KAIPjL,KAAKmF,WAAW6I,UAAY,SAAAH,GAC1B,GAAMI,GAAU9B,EAAKpH,SAASmJ,cAAcL,EAAMxF,KAClD,KAAK,GAAMhI,KAAK4N,GACVA,EAAQzM,eAAenB,KACzB8L,EAAKxD,OAAO,iBAAkBsF,EAAQ5N,IACtC8L,EAAKgC,eAAeF,EAAQ5N,IAGhC8L,GAAKS,mBFyHPlJ,IAAK,MACLf,MAAO,SEtHL0F,GAAM,GAAA+F,GAAApO,KACF8M,GACJuB,OAAQrO,KAAK4E,YAAY0J,IACzBhG,QACED,KAAMA,GAGV,OAAOrI,MAAK+M,MAAMD,GAAKE,KAAK,SAAAC,GAAA,MAAUmB,GAAKrJ,SAASoI,oBAAoBiB,EAAKxJ,YAAY0J,IAAKrB,QF6H9FvJ,IAAK,OACLf,MAAO,SE3HJ0F,GACH,GAAMyE,IACJuB,OAAQrO,KAAK4E,YAAY2J,KACzBjG,QACED,KAAMA,GAIV,OAAOrI,MAAKwO,WAAW1B,MF8HvBpJ,IAAK,aACLf,MAAO,SE5HEmK,GACT9M,KAAKyO,YAAY3B,GAAK,MF+HtBpJ,IAAK,QACLf,MAAO,SE7HHmK,GAAK,GAAA4B,GAAA1O,IACT,OAAO,IAAI2O,SAAQ,SAACC,EAASC,GAC3B,GAAMzD,GAAKsD,EAAKD,YAAY3B,EAC5B4B,GAAKI,cAAc1D,EAAIwD,EAASC,QFmIlCnL,IAAK,WACLf,MAAO,WE/HP,GAAI3C,KAAK+O,cAEP,WADA/O,MAAK2I,OAAO,wCAGO,gBAAjB3I,KAAKgF,UAIThF,KAAK2I,OAAO,oBACZ3I,KAAKgP,WAAW,cAChBhP,KAAKuF,UAAY,KACjBvF,KAAKiF,YAAa,EAClBjF,KAAKiP,sBFmILvL,IAAK,cACLf,MAAO,SEjIG+K,EAAQwB,GAElB,IAAIlP,KAAKmP,kBAAT,CAIAnP,KAAK2I,OAAO,gBAAiB+E,EAAQwB,EAErC,IAAM/D,GAAY+D,IAAmB,GAEnB,IAAd/D,IACFnL,KAAKiF,YAAa,GAGpBjF,KAAKoP,qBAAqBjE,GAErBnL,KAAKmP,oBACRnP,KAAKgP,WAAW,gBACZhP,KAAK+F,iBACPuF,aAAatL,KAAK+F,kBAEO,IAAvB/F,KAAKkF,eACPlF,KAAKqP,KAAK,cACR3B,OAAQA,EACRvC,UAAWA,KAKZnL,KAAKqF,kBACRrF,KAAKmF,WAAWmK,YFqIlB5L,IAAK,iBACLf,MAAO,WEjIP3C,KAAK8F,kBAAoB,EACpB9F,KAAKmP,mBACRnP,KAAKqN,YAAY,kBAAkB,GAEA,OAAjCrN,KAAKwG,QAAQqB,iBACf7H,KAAKwG,QAAQqB,qBFsIfnE,IAAK,WACLf,MAAO,WEnIE,GAAA4M,GAAAvP,IAKT,IAFAA,KAAK2I,OAAO,uBAEyB,IAAjC3I,KAAKwG,QAAQmB,gBAGf,MAFA3H,MAAK2I,OAAO,qEACZ3I,MAAKwP,gBAIsB,QAAzBxP,KAAK+F,iBACPuF,aAAatL,KAAK+F,gBAGpB,IAAM0J,GAAK,SAAClC,EAAOlF,GACjB,IAAc,IAAVkF,EAAgB,CAQlB,GALAgC,EAAK5G,OAAO,6DAA8DN,GAC1EkH,EAAKzJ,oBACDyJ,EAAKxJ,iBACPuF,aAAaiE,EAAKxJ,iBAEiB,OAAjCwJ,EAAK/I,QAAQmB,iBAA4B4H,EAAKzJ,mBAAqByJ,EAAK/I,QAAQmB,gBAElF,WADA4H,GAAKC,gBAGP,IAAMvE,GAAWsE,EAAK/I,QAAQoB,gBAAkB8H,KAAKC,MAAsB,IAAhBD,KAAKE,SAEhE,aADAL,EAAKxJ,gBAAkB8D,WAAW,iBAAM0F,GAAKM,YAAY5E,IAI3D,GADAsE,EAAKzJ,kBAAoB,EACC,OAAtByJ,EAAKhJ,aAST,GANAgJ,EAAKhJ,aAAauJ,KAAOzH,EAAKyH,KAC9BP,EAAKhJ,aAAawJ,IAAM1H,EAAK0H,IACzB,QAAU1H,KACZkH,EAAKhJ,aAAayJ,KAAO3H,EAAK2H,MAEhCT,EAAKhJ,aAAa0J,KAAO5H,EAAK4H,KAC1BV,EAAKJ,kBACPI,EAAK5G,OAAO,+CACZ4G,EAAKxB,eACA,CACLwB,EAAK5G,OAAO,6BAEZ,IAAMmE,IACJuB,OAAQkB,EAAK3K,YAAYsL,QACzB5H,QACEF,YAAamH,EAAKhJ,cAItBgJ,GAAKxC,MAAMD,GAAKE,KAAK,SAAAC,GACnBsC,EAAKY,iBAAiBZ,EAAKxK,SAASoI,oBAAoBoC,EAAK3K,YAAYsL,QAASjD,KACjF,WACDsC,EAAKlC,YAAY,iBAAiB,MAKxC,IAA+B,OAA3BrN,KAAKwG,QAAQsB,UAAoB,CACnC,GAAMsI,KACNpQ,MAAKwG,QAAQsB,UAAUsI,EAASX,OAEhCzP,MAAKqQ,MACHrQ,KAAKwG,QAAQe,gBACbvH,KAAKwG,QAAQiB,cACbzH,KAAKwG,QAAQgB,eACbxH,KAAKwG,QAAQkB,YACb+H,MFsIJ/L,IAAK,aACLf,MAAO,SElIE+I,GAAK,GAAA4E,GAAAtQ,KACRyL,EAAUC,EAAID,OAMpB,IAJMA,IAAWzL,MAAKwF,QACpBxF,KAAKwF,MAAMiG,GAAWC,IAGnB1L,KAAK+O,cAGR,WADArD,GAAI6E,SAIN7E,GAAIK,iBAEJ,IAAMe,IACJuB,OAAQrO,KAAK4E,YAAY4L,UACzBlI,QACEmD,QAASA,GAQb,KAAI,EAAAvH,EAAA0G,YAAWa,EAASzL,KAAKwG,QAAQW,sBAE/BnH,KAAK4F,gBACP5F,KAAK6F,cAAc4F,IAAW,GAE9BzL,KAAKyQ,oBACLzQ,KAAK0Q,WAAWhF,GAChB1L,KAAK2Q,wBAEF,CAGL,IAAgB,IAFA3Q,KAAK4Q,SAASlF,GAER,CACpBoB,EAAIxE,OAAOuI,SAAU,CACrB,IAAMC,GAAO9Q,KAAK+Q,WAAWtF,EAChB,MAATqF,IACFhE,EAAIxE,OAAOwI,KAAOA,EAEpB,IAAME,GAAOtF,EAAIuF,UACJ,KAATD,IACFlE,EAAIxE,OAAO0I,KAAOA,GAItBhR,KAAK+M,MAAMD,GAAKE,KAAK,SAAAC,GACnBqD,EAAKY,mBAAmBzF,EAAS6E,EAAKvL,SAASoI,oBAAoBmD,EAAK1L,YAAY4L,UAAWvD,KAC9F,SAAAkE,GACDb,EAAKc,gBAAgBD,SFyIzBzN,IAAK,eACLf,MAAO,SErII+I,GACP1L,KAAK+O,eAEP/O,KAAKyO,aACHJ,OAAQrO,KAAK4E,YAAYyM,YACzB/I,QACEmD,QAASC,EAAID,cF2InB/H,IAAK,SACLf,MAAO,SEtIF8I,GACL,MAAOzL,MAAKsR,QAAQ7F,MFyIpB/H,IAAK,UACLf,MAAO,SEvID8I,GACN,GAAMC,GAAM1L,KAAKwF,MAAMiG,EACvB,OAAKC,IACI,QF4IThI,IAAK,mBACLf,MAAO,SExIQsK,GAAQ,GAAAsE,GAAAvR,IACvB,KAAIA,KAAK+O,cAAT,CASA,GAL2B,OAAvB/O,KAAKqG,gBACPrG,KAAKoG,UAAY,GAAI0F,OAAQ0F,UAAYxR,KAAKqG,cAAcmL,UAC5DxR,KAAKqG,cAAgB,MAGnB4G,EAAOwE,QAAS,CAGlB,GAFkBxE,EAAOyE,QAMvB,MAHA1R,MAAKkF,eAAgB,EACrBlF,KAAKqN,YAAY,WAAW,OAC5BrN,MAAK6P,WAeT,GAXA7P,KAAKuF,UAAY0H,EAAO0E,OACxB3R,KAAKgP,WAAW,aAEZhP,KAAK+F,iBACPuF,aAAatL,KAAK+F,iBAGhBkH,EAAOwE,UACTzR,KAAK+F,gBAAkB8D,WAAW,iBAAM0H,GAAK1B,YAAyB,IAAb5C,EAAO2E,MAG9D5R,KAAKwG,QAAQO,YAAa,CAC5B/G,KAAK6R,gBACL7R,KAAKyQ,mBACL,KAAK,GAAMhF,KAAWzL,MAAKwF,MACzB,GAAIxF,KAAKwF,MAAMhE,eAAeiK,GAAU,CACtC,GAAMC,GAAM1L,KAAKwF,MAAMiG,EACnBC,GAAIoG,sBACN9R,KAAK0Q,WAAWhF,GAItB1L,KAAK2Q,mBACL3Q,KAAK+R,cAAa,GAGpB/R,KAAK4M,cAEL,IAAMoF,IACJL,OAAQ1E,EAAO0E,OACfjF,UAAW1M,KAAKoF,eAChB6M,QAASjS,KAAKoG,SAEZ6G,GAAO5E,OACT2J,EAAI3J,KAAO4E,EAAO5E,MAGpBrI,KAAKqP,KAAK,UAAW2C,OF+IrBtO,IAAK,YACLf,MAAO,WE5ImB,OAAtB3C,KAAKiG,cACPqF,aAAatL,KAAKiG,cAEO,OAAvBjG,KAAKgG,eACPkM,cAAclS,KAAKgG,kBFiJrBtC,IAAK,aACLf,MAAO,WE9II,GAAAwP,GAAAnS,MACe,IAAtBA,KAAKwG,QAAQQ,MAAiBhH,KAAKwG,QAAQS,cAAgB,GAG1DjH,KAAK+O,gBAIV/O,KAAKgG,cAAgBoM,YAAY,WAC/B,IAAKD,EAAKpD,cAER,WADAoD,GAAKE,WAGPF,GAAKnL,OACLmL,EAAKlM,aAAe4D,WAAW,WAC7BsI,EAAK9E,YAAY,WAAW,IAC3B8E,EAAK3L,QAAQU,kBACflH,KAAKwG,QAAQS,kBFmJhBvD,IAAK,eACLf,MAAO,WEhJP3C,KAAKqS,YACLrS,KAAKsS,gBFoJL5O,IAAK,kBACLf,MAAO,SElJO8I,EAAS8B,GACvB,GAAM7B,GAAM1L,KAAKsR,QAAQ7F,EACzB,IAAKC,GAGAA,EAAI6G,iBAGT,MAAmB,KAAfhF,EAAMiF,MApwBQ,YAowBMjF,EAAMkF,YAC5BzS,MAAKqN,YAAY,WAAW,OAG9B3B,GAAIgH,mBAAmBnF,MFsJvB7J,IAAK,qBACLf,MAAO,SEpJU8I,EAASwB,GAC1B,GAAMvB,GAAM1L,KAAKsR,QAAQ7F,EACzB,IAAKC,GAGAA,EAAI6G,iBAAT,CAIA,GAAII,IAAY,CAEZ,cAAe1F,KACjB0F,EAAY1F,EAAO0F,WAErBjH,EAAIkH,qBAAqBD,EAEzB,IAAIE,GAAO5F,EAAO6F,YAElB,IAAID,GAAQA,EAAKrP,OAAS,EAAG,CAE3BqP,EAAOA,EAAKE,SACZ,KAAK,GAAI1S,KAAKwS,GACRA,EAAKrR,eAAenB,IACtBL,KAAKgT,mBAAmBvH,EAASoH,EAAKxS,QAItC,QAAU4M,KAEZjN,KAAKyF,YAAYgG,GAAWwB,EAAO6D,UFyJvCpN,IAAK,eACLf,MAAO,SErJIsQ,GACX,GAAM7H,GAAK6H,EAAM7H,GACX6B,EAASgG,EAAMhG,MAErB,IAAM7B,IAAMpL,MAAKmG,WAAjB,CAGA,GAAMkF,GAAYrL,KAAKmG,WAAWiF,EAIlC,IAHAE,aAAatL,KAAKmG,WAAWiF,GAAItE,eAC1B9G,MAAKmG,WAAWiF,IAElB,EAAAlH,EAAAgP,aAAYD,GAMV,CACL,GAAM1H,GAAUF,EAAUE,OAC1B,KAAKA,EACH,MAEFA,GAAQ0H,EAAM1F,WAXS,CACvB,GAAM/E,GAAW6C,EAAU7C,QAC3B,KAAKA,EACH,MAEFA,GAASyE,QF+JXvJ,IAAK,cACLf,MAAO,SEtJG8I,EAAS0H,GACnB,GAAMzH,GAAM1L,KAAKsR,QAAQ7F,EACpBC,IAGLA,EAAI2D,KAAK,OAAQ8D,MFyJjBzP,IAAK,eACLf,MAAO,SEvJI8I,EAAS2H,GACpB,GAAM1H,GAAM1L,KAAKsR,QAAQ7F,EACpBC,IAGLA,EAAI2D,KAAK,QAAS+D,MF0JlB1P,IAAK,eACLf,MAAO,SExJI8I,GACX,GAAMC,GAAM1L,KAAKsR,QAAQ7F,EACpBC,IAGLA,EAAI2H,iBF2JJ3P,IAAK,qBACLf,MAAO,SEzJU8I,EAAS6H,GAE1BtT,KAAKyF,YAAYgG,GAAW6H,EAAIC,GAChC,IAAM7H,GAAM1L,KAAKsR,QAAQ7F,EACpBC,IAGLA,EAAI2D,KAAK,UAAWiE,MF4JpB5P,IAAK,iBACLf,MAAO,SE1JM8P,GACbzS,KAAKqP,KAAK,UAAWoD,EAAQpK,SF6J7B3E,IAAK,mBACLf,MAAO,SE3JQsK,GAAQ,GAAAuG,GAAAxT,IAIvB,IAHIA,KAAK+F,iBACPuF,aAAatL,KAAK+F,iBAEhBkH,EAAOwE,QAAS,CAGlB,GAFgBxE,EAAOyE,QAEV,CACX,GAAMzG,GAAWjL,KAAKwG,QAAQoB,gBAAkB8H,KAAKC,MAAsB,IAAhBD,KAAKE,SAEhE,aADA5P,KAAK+F,gBAAkB8D,WAAW,iBAAM2J,GAAK3D,YAAY5E,IAG3DjL,KAAKuF,UAAY0H,EAAO0E,OACxB3R,KAAK+F,gBAAkB8D,WAAW,iBAAM2J,GAAK3D,YAAyB,IAAb5C,EAAO2E,SFqKlElO,IAAK,cACLf,MAAO,SElKG0F,GACV,GAAMoL,GAAOzT,KAAK+E,SAAS2O,WAAWrL,GAClCsL,EAAO,CACP,SAAUF,KACZE,EAAOF,EAAA,KAET,IAAMhI,GAAUgI,EAAKhI,OAErB,IAAIkI,IAAS3T,KAAK6E,UAAU+O,YAAa,CACvC,GAAMN,GAAMtT,KAAK+E,SAAS8O,eAAe7T,KAAK6E,UAAU+O,YAAaH,EAAKpL,KAC1ErI,MAAKgT,mBAAmBvH,EAAS6H,OAC5B,IAAIK,IAAS3T,KAAK6E,UAAUiP,QAAS,CAC1C,GAAMrB,GAAUzS,KAAK+E,SAAS8O,eAAe7T,KAAK6E,UAAUiP,QAASL,EAAKpL,KAC1ErI,MAAK+T,eAAetB,OACf,IAAIkB,IAAS3T,KAAK6E,UAAUmP,KAAM,CACvC,GAAMb,GAAOnT,KAAK+E,SAAS8O,eAAe7T,KAAK6E,UAAUmP,KAAMP,EAAKpL,KACpErI,MAAKiU,YAAYxI,EAAS0H,OACrB,IAAIQ,IAAS3T,KAAK6E,UAAUqP,MAAO,CACxC,GAAMd,GAAQpT,KAAK+E,SAAS8O,eAAe7T,KAAK6E,UAAUqP,MAAOT,EAAKpL,KACtErI,MAAKmU,aAAa1I,EAAS2H,OAClBO,KAAS3T,KAAK6E,UAAUuP,OACjCpU,KAAKqU,aAAa5I,MFsKpB/H,IAAK,iBACLf,MAAO,SEnKMsQ,GACb,OAAcjQ,KAAViQ,GAAiC,OAAVA,EAEzB,WADAjT,MAAK2I,OAAO,wCAId,IAAMyC,GAAK6H,EAAM7H,EAEbA,IAAMA,EAAK,EACbpL,KAAKsU,aAAarB,GAElBjT,KAAKuU,YAAYtB,EAAMhG,WFuKzBvJ,IAAK,SACLf,MAAO,WEnKP,GAAM6R,GAAWxU,KAAK0F,UAAU+O,MAAM,EACtCzU,MAAK0F,aACL1F,KAAK0U,eAAeF,MFuKpB9Q,IAAK,QACLf,MAAO,WEpKP3C,KAAKyO,aACHJ,OAAQrO,KAAK4E,YAAY+P,UFyK3BjR,IAAK,WACLf,MAAO,SEtKA+I,GACP,MAA+B,QAAxBA,EAAIG,mBFyKXnI,IAAK,aACLf,MAAO,SEvKE8I,GACT,GAAMmJ,GAAU5U,KAAKyF,YAAYgG,EAEjC,OAAImJ,IACF5U,KAAK2I,OAAO,sCAAuC8C,GAC5CmJ,IAET5U,KAAK2I,OAAO,gCAAiC8C,GACtC,OF0KP/H,IAAK,qBACLf,MAAO,SEvKU8P,EAASD,GAM1B,OAJEC,QAASA,EACTD,KAAMA,GAAQ,MF6KhB9O,IAAK,gBACLf,MAAO,SExKKyI,EAAI5C,EAAU+C,GAAS,GAAAsJ,GAAA7U,IACnCA,MAAKmG,WAAWiF,IACd5C,SAAUA,EACV+C,QAASA,EACTzE,QAAS,MAEX9G,KAAKmG,WAAWiF,GAAItE,QAAU+C,WAAW,iBAChCgL,GAAK1O,WAAWiF,IACnB,EAAAlH,EAAA4Q,YAAWvJ,IACbA,EAAQsJ,EAAKrJ,mBAp9BC,aAs9BfxL,KAAKwG,QAAQM,YF6KhBpD,IAAK,cACLf,MAAO,SE3KG8P,EAASsC,GACnB,GAAI3J,SAUJ,OATK2J,KACH3J,EAAKpL,KAAKgV,iBACVvC,EAAQrH,GAAKA,IAEU,IAArBpL,KAAK2F,YACP3F,KAAK0F,UAAU+N,KAAKhB,GAEpBzS,KAAK0U,gBAAgBjC,IAElBsC,EAGE,EAFE3J,KFgLT1H,IAAK,cACLf,MAAO,WE3KP,MAAO3C,MAAKiV,kBF+KZvR,IAAK,UACLf,MAAO,WE5KP3C,KAAK+N,cFgLLrK,IAAK,aACLf,MAAO,WE7KP3C,KAAKqN,YAAY,UAAU,MFiL3B3J,IAAK,OACLf,MAAO,WE9KP,MAAO3C,MAAKkV,WFkLZxR,IAAK,gBACLf,MAAO,WE7KP3C,KAAK2F,aAAc,KFmLnBjC,IAAK,eACLf,MAAO,SEjLIwS,GAEXA,EAAQA,IAAS,EACjBnV,KAAK2F,aAAc,GACL,IAAVwP,GACFnV,KAAKmV,WFqLPzR,IAAK,QACLf,MAAO,WEhLP3C,KAAKoV,YFqLL1R,IAAK,oBACLf,MAAO,WEhLP3C,KAAK4F,iBAAkB,KFsLvBlC,IAAK,mBACLf,MAAO,WEpLU,GAAA0S,GAAArV,IAGjBA,MAAK4F,iBAAkB,CACvB,IAAM0P,GAAetV,KAAK6F,aAE1B7F,MAAK6F,gBACL,IAAM0P,KAEN,KAAK,GAAM9J,KAAW6J,GACpB,GAAIA,EAAa9T,eAAeiK,GAAU,CACxC,GAAMC,GAAM1L,KAAKsR,QAAQ7F,EAEzB,KAAKC,EACH,QAEF6J,GAAS9B,KAAKhI,GAIlB,GAAwB,IAApB8J,EAAS/R,OAAb,CAIA,GAAM6E,IACJsJ,OAAQ3R,KAAKuF,UACbgQ,SAAUA,GAGN9F,EAAK,SAAClC,EAAOlF,GACjB,IAAc,IAAVkF,EAAJ,CAeA,GAAIiI,IAAQ,CAEPH,GAAK1P,cACR0P,EAAKxD,gBACL2D,GAAQ,EAGV,KAAK,GAAMnV,KAAKkV,GACd,GAAIA,EAAS/T,eAAenB,GAAI,IAAAoV,GAAA,WAC9B,GAAMhK,GAAU8J,EAASlV,GACnBqV,EAAkBrN,EAAKoD,EAE7B,KAAKiK,EAMH,MAJAL,GAAKnE,oBACH3D,MAAO,8CACPoI,MAAOlK,aAET,UAEF,IAAKiK,EAAgBpM,QAAqC,MAA3BoM,EAAgBpM,OAmC7C+L,EAAKnE,oBACH3D,MAAOmI,EAAgBpM,OACvBqM,MAAOlK,iBArCoD,CAC7D,GAAMqB,IACJuB,OAAQgH,EAAKzQ,YAAY4L,UACzBlI,QACEmD,UACAkG,OAAQ0D,EAAK9P,UACbyK,KAAM0F,EAAgB1F,KACtBC,KAAMyF,EAAgBzF,OAIpBvE,EAAM2J,EAAK/D,QAAQ7F,EACzB,IAAY,OAARC,EACF,gBAKF,KAAgB,IAFA2J,EAAKzE,SAASlF,GAER,CACpBoB,EAAIxE,OAAOuI,SAAU,CACrB,IAAMC,GAAOuE,EAAKtE,WAAWtF,EAChB,MAATqF,IACFhE,EAAIxE,OAAOwI,KAAOA,EAEpB,IAAME,GAAOtF,EAAIuF,UACJ,KAATD,IACFlE,EAAIxE,OAAO0I,KAAOA,GAGtBqE,EAAKtI,MAAMD,GAAKE,KAAK,SAAAC,GACnBoI,EAAKnE,mBAAmBzF,EAAS4J,EAAKtQ,SAASoI,oBAAoBkI,EAAKzQ,YAAY4L,UAAWvD,KAC9F,SAAAkE,GACDkE,EAAKjE,gBAAgB3F,EAAS0F,QA5CJ,iBAAAsE,EAyB1B,SA8BJD,GACFH,EAAKtD,cAAa,OA/EpB,CACEsD,EAAK1M,OAAO,+BACZ,KAAK,GAAMtI,KAAKkV,GACd,GAAIA,EAAS/T,eAAenB,GAAI,CAC9B,GAAMoL,GAAU8J,EAASlV,EACzBgV,GAAKnE,oBACH3D,MAAO,+BACPoI,MAAOlK,eA6EW,QAAxBzL,KAAKwG,QAAQ0B,OACflI,KAAKwG,QAAQ0B,QACXG,KAAMA,GACLoH,GAEHzP,KAAKqQ,MAAMrQ,KAAKwG,QAAQuB,aAAc/H,KAAKwG,QAAQyB,WAAYjI,KAAKwG,QAAQwB,YAAaK,EAAMoH,OF6LjG/L,IAAK,YACLf,MAAO,SE1LC8I,EAASmK,GACjB,GAAI3L,UAAUzG,OAAS,EACrB,KAAM,IAAI6G,OAAM,6CAA+CJ,UAAUzG,OAE3E,MAAK,EAAAU,EAAA2R,UAASpK,GACZ,KAAM,IAAIpB,OAAM,kDAElB,KAAKrK,KAAKwG,QAAQO,cAAgB/G,KAAK+O,cACrC,KAAM,IAAI1E,OAAM,2EAGlB,IAAMyL,GAAa9V,KAAKsR,QAAQ7F,EAEhC,IAAmB,OAAfqK,EAKF,MAJAA,GAAWC,WAAWH,GAClBE,EAAWE,mBACbF,EAAWG,YAENH,CAET,IAAMpK,GAAM,GAAA1H,GAAAjC,QAAiB/B,KAAMyL,EAASmK,EAG5C,OAFA5V,MAAKwF,MAAMiG,GAAWC,EACtBA,EAAIuK,YACGvK,MF8LF3I,GACPe,EAAS/B,WACkBxB,KAAKZ,EAASO,EAAoB,KAIzDgW,GACA,SAAUtW,EAAQD,EAASO,GAEjC,YAiBA,SAAS8B,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BrC,EAAMQ,GAAQ,IAAKR,EAAQ,KAAM,IAAIsC,gBAAe,4DAAgE,QAAO9B,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BR,EAAPQ,EAElO,QAAS+B,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIL,WAAU,iEAAoEK,GAAeD,GAAShB,UAAYT,OAAO2B,OAAOD,GAAcA,EAAWjB,WAAamB,aAAeC,MAAOJ,EAAUtB,YAAY,EAAO2B,UAAU,EAAM5B,cAAc,KAAewB,IAAY1B,OAAO+B,eAAiB/B,OAAO+B,eAAeN,EAAUC,GAAcD,EAASO,UAAYN,GAlBje1B,OAAOC,eAAepB,EAAS,cAC7BgD,OAAO,GAGT,IAAIS,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIlD,GAAI,EAAGA,EAAIkD,EAAMC,OAAQnD,IAAK,CAAE,GAAIoD,GAAaF,EAAMlD,EAAIoD,GAAWxC,WAAawC,EAAWxC,aAAc,EAAOwC,EAAWzC,cAAe,EAAU,SAAWyC,KAAYA,EAAWb,UAAW,GAAM9B,OAAOC,eAAeuC,EAAQG,EAAWC,IAAKD,IAAiB,MAAO,UAAUvB,EAAayB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBnB,EAAYX,UAAWoC,GAAiBC,GAAaP,EAAiBnB,EAAa0B,GAAqB1B,MGv4ChiB2B,EAAA3D,EAAA,GH24CI4D,EAIJ,SAAgChC,GAAO,MAAOA,IAAOA,EAAIV,WAAaU,GAAQC,QAASD,IAJjD+B,GGz4CtCK,EAAAhE,EAAA,GAIMiW,EAAa,EAMEC,EHi5CF,SAAUjS,GGh5C3B,QAAAiS,GAAYC,EAAY5K,EAASmK,GAAQ5T,EAAAhC,KAAAoW,EAAA,IAAA9R,GAAAlC,EAAApC,MAAAoW,EAAAtT,WAAAhC,OAAAyD,eAAA6R,IAAA7V,KAAAP,MAAA,OAEvCsE,GAAKmH,QAAUA,EACfnH,EAAKgS,YAAcD,EACnB/R,EAAKU,QAAUmR,EACf7R,EAAKiS,OAAS,KACdjS,EAAKkS,gBAAiB,EACtBlS,EAAKmS,YAAa,EAClBnS,EAAKoS,QAAS,EACdpS,EAAKqS,qBAAuB,KAC5BrS,EAAKsS,gBAAiB,EACtBtS,EAAKuH,gBAAkB,KACvBvH,EAAKyR,WAAWH,GAChBtR,EAAKuS,qBAbkCvS,EHypDzC,MAxQAhC,GAAU8T,EAAcjS,GAsBxBf,EAAagT,IACX1S,IAAK,qBACLf,MAAO,WGz5CY,GAAA8F,GAAAzI,IAInBA,MAAK0W,QAAS,EAEd1W,KAAK2W,qBAAuB,GAAIhI,SAAQ,SAACC,EAASC,GAChDpG,EAAKqO,SAAW,SAAAnU,GACd8F,EAAKiO,QAAS,EACd9H,EAAQjM,IAEV8F,EAAKsO,QAAU,SAAA5F,GACb1I,EAAKiO,QAAS,EACd7H,EAAOsC,SHg6CXzN,IAAK,WACLf,MAAO,WG35CP,GAAMqU,GAAM,GAAIlL,KAChB,OAAO4D,MAAKC,OAAOqH,EAAMhX,KAAK6L,iBAAmB,KAAQ6D,KAAKC,MAAM3P,KAAKsW,YAAY9P,QAAQM,QAAU,QH+5CvGpD,IAAK,aACLf,MAAO,SG75CEiT,GACT,GAAKA,EAGL,IAAI,EAAA1R,EAAA4Q,YAAWc,GAEb5V,KAAKiX,GAAG,UAAWrB,OACd,IAAI9U,OAAOS,UAAU2V,SAAS3W,KAAKqV,KAAY9U,OAAOS,UAAU2V,SAAS3W,SAE9E,IAAK,GADC4W,IAAe,UAAW,OAAQ,QAAS,cAAe,YAAa,SACpE9W,EAAI,EAAGC,EAAI6W,EAAY3T,OAAQnD,EAAIC,EAAGD,IAAK,CAClD,GAAM+W,GAAKD,EAAY9W,EACnB+W,KAAMxB,IACR5V,KAAKiX,GAAGG,EAAIxB,EAAOwB,QHm6CzB1T,IAAK,SACLf,MAAO,WG75CP,MAAO3C,MAAKgF,UAAYmR,KHi6CxBzS,IAAK,kBACLf,MAAO,WG95CP,MAjEwB,KAiEjB3C,KAAKgF,WHk6CZtB,IAAK,iBACLf,MAAO,WG/5CP,MAxEuB,KAwEhB3C,KAAKgF,WHm6CZtB,IAAK,WACLf,MAAO,WGh6CP,MA3EmB,KA2EZ3C,KAAKgF,SA1EK,IA0EyBhF,KAAKgF,WHo6C/CtB,IAAK,aACLf,MAAO,WGj6CP,MA/EmB,KA+EZ3C,KAAKgF,WHq6CZtB,IAAK,WACLf,MAAO,WGl6CP,MAlFiB,KAkFV3C,KAAKgF,WHs6CZtB,IAAK,UACLf,MAAO,WGn6CP3C,KAAKgF,QAAUmR,KHu6CfzS,IAAK,kBACLf,MAAO,YGp6Ca,IAAhB3C,KAAK0W,SAEP1W,KAAK6W,qBACL7W,KAAKwW,gBAAiB,GAExBxW,KAAKgF,QAjGkB,KHygDvBtB,IAAK,uBACLf,MAAO,SGt6CYgQ,GACnB,GApGmB,IAoGf3S,KAAKgF,QAAT,CAGAhF,KAAKyW,WAAa9D,EAClB3S,KAAKgF,QAxGc,CAyGnB,IAAMqS,GAAiBrX,KAAKsX,4BAA4B3E,EAExD3S,MAAK6L,gBAAkB,KACvB7L,KAAKqP,KAAK,YAAagI,GACvBrX,KAAK8W,SAASO,OHy6Cd3T,IAAK,qBACLf,MAAO,SGv6CUwO,GACjB,GAhHiB,IAgHbnR,KAAKgF,QAAT,CAGAhF,KAAKgF,QAnHY,EAoHjBhF,KAAKuW,OAASpF,CACd,IAAMoG,GAAavX,KAAKwX,2BAExBxX,MAAKqP,KAAK,QAASkI,GACnBvX,KAAK+W,QAAQQ,OH06Cb7T,IAAK,sBACLf,MAAO,WGv6CP3C,KAAKqP,KAAK,eACR5D,QAASzL,KAAKyL,aH46ChB/H,IAAK,mBACLf,MAAO,SGz6CQ8U,GACf,GAjIwB,IAiIpBzX,KAAKgF,QAAT,CAGA,GAAM0S,GAtIa,IAsIC1X,KAAKgF,OACzBhF,MAAKgF,QArImB,GAsIF,IAAlByS,IACFzX,KAAK4W,gBAAiB,GAEpBc,GACF1X,KAAK4L,0BH66CPlI,IAAK,qBACLf,MAAO,WGz6CP,OAAQ3C,KAAK4W,kBH66CblT,IAAK,8BACLf,MAAO,WG16CP,OACE8I,QAASzL,KAAKyL,QACdkM,cAAe3X,KAAKwW,eACpB7D,UAAW3S,KAAKyW,eH+6ClB/S,IAAK,4BACLf,MAAO,WG36CP,GAAMiV,GAAwB5X,KAAKuW,MAGnC,OAFAqB,GAAsBnM,QAAUzL,KAAKyL,QACrCmM,EAAsBD,cAAgB3X,KAAKwW,eACpCoB,KH+6CPlU,IAAK,QACLf,MAAO,SG76CH6F,EAAU+C,GACVvL,KAAK0W,SACH1W,KAAK2L,aACPnD,EAASxI,KAAKsX,+BAEd/L,EAAQvL,KAAKwX,iCHk7CjB9T,IAAK,YACLf,MAAO,WG3lDY,IA8Kf3C,KAAKgF,SAGThF,KAAKsW,YAAY5F,WAAW1Q,SHi7C5B0D,IAAK,cACLf,MAAO,WG96CP3C,KAAKgM,kBAAiB,GACtBhM,KAAK6L,gBAAkB,KACvB7L,KAAKsW,YAAYuB,aAAa7X,SHk7C9B0D,IAAK,cACLf,MAAO,SGh7CG8P,EAASkB,GAAM,GAAAxH,GAAAnM,IACzB,OAAOA,MAAK2W,qBACT3J,KAAK,iBAAMb,GAAKmK,YAAYvJ,MAAM0F,KAClCzF,KAAK,SAAAC,GAAA,MAAUd,GAAKmK,YAAYvR,SAASoI,oBAAoBwG,EAAM1G,QHu7CtEvJ,IAAK,UACLf,MAAO,SGp7CD0F,GACN,MAAOrI,MAAK8X,aACVzJ,OAAQrO,KAAKsW,YAAY1R,YAAYmT,QACrCzP,QACEmD,QAASzL,KAAKyL,QACdpD,KAAMA,IAEPrI,KAAKsW,YAAY1R,YAAYmT,YHu7ChCrU,IAAK,WACLf,MAAO,WGp7CP,MAAO3C,MAAK8X,aACVzJ,OAAQrO,KAAKsW,YAAY1R,YAAYoT,SACrC1P,QACEmD,QAASzL,KAAKyL,UAEfzL,KAAKsW,YAAY1R,YAAYoT,aHw7ChCtU,IAAK,gBACLf,MAAO,WGr7CP,MAAO3C,MAAK8X,aACVzJ,OAAQrO,KAAKsW,YAAY1R,YAAYqT,eACrC3P,QACEmD,QAASzL,KAAKyL,UAEfzL,KAAKsW,YAAY1R,YAAYqT,mBHy7ChCvU,IAAK,UACLf,MAAO,WGt7CP,MAAO3C,MAAK8X,aACVzJ,OAAQrO,KAAKsW,YAAY1R,YAAYsT,QACrC5P,QACEmD,QAASzL,KAAKyL,UAEfzL,KAAKsW,YAAY1R,YAAYsT,aH27C3B9B,GACPtS,EAAS/B,QAEXpC,GAAQoC,QG7pDaqU,EH8pDrBxW,EAAOD,QAAUA,EAAiB,SAI5BwY,GACA,SAAUvY,EAAQD,EAASO,GAEjC,YASA,SAAS8B,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHrB,OAAOC,eAAepB,EAAS,cAC7BgD,OAAO,GAGT,IAAIS,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIlD,GAAI,EAAGA,EAAIkD,EAAMC,OAAQnD,IAAK,CAAE,GAAIoD,GAAaF,EAAMlD,EAAIoD,GAAWxC,WAAawC,EAAWxC,aAAc,EAAOwC,EAAWzC,cAAe,EAAU,SAAWyC,KAAYA,EAAWb,UAAW,GAAM9B,OAAOC,eAAeuC,EAAQG,EAAWC,IAAKD,IAAiB,MAAO,UAAUvB,EAAayB,EAAYC,GAAiJ,MAA9HD,IAAYN,EAAiBnB,EAAYX,UAAWoC,GAAiBC,GAAaP,EAAiBnB,EAAa0B,GAAqB1B,KIxrDnhBoI,mBACX8C,QAAS,EACToD,UAAW,EACXa,YAAa,EACb0G,QAAS,EACTC,SAAU,EACVC,eAAgB,EAChBC,QAAS,EACTvD,KAAM,EACNpG,KAAM,EACND,IAAK,EACL4B,QAAS,IAGE3F,gBACXqJ,YAAa,EACbI,KAAM,EACNE,MAAO,EACPE,MAAO,EACPN,QAAS,GJ+rDOnU,EI5rDL6K,YJ4rD2B,WACtC,QAASA,KACPxI,EAAgBhC,KAAMwK,GAgBxB,MAbApH,GAAaoH,IACX9G,IAAK,iBACLf,MAAO,SIlsDMsJ,GACb,GAAMmM,KACN,KAAK,GAAM/X,KAAK4L,GACVA,EAASzK,eAAenB,IAC1B+X,EAAgB3E,KAAKjK,KAAKO,UAAUkC,EAAS5L,IAGjD,OAAO+X,GAAgBjF,KAAK,UJssDvB3I,KAGS7K,EIrsDL8K,YJqsD2B,WACtC,QAASA,KACPzI,EAAgBhC,KAAMyK,GAoCxB,MAjCArH,GAAaqH,IACX/G,IAAK,gBACLf,MAAO,SI3sDK0F,GACZ,GAAM4F,MACAoK,EAAiBhQ,EAAKiQ,MAAM,KAClC,KAAK,GAAMjY,KAAKgY,GACd,GAAIA,EAAe7W,eAAenB,GAAI,CACpC,IAAKgY,EAAehY,GAClB,QAEF,IAAM4S,GAAQzJ,KAAKC,MAAM4O,EAAehY,GACxC4N,GAAQwF,KAAKR,GAGjB,MAAOhF,MJ8sDPvK,IAAK,sBACLf,MAAO,SI5sDW4V,EAAYlQ,GAC9B,MAAOA,MJ+sDP3E,IAAK,aACLf,MAAO,SI7sDE0F,GACT,MAAOA,MJgtDP3E,IAAK,iBACLf,MAAO,SI9sDM6V,EAAUnQ,GACvB,MAAOA,OJktDFoC,MAKHgO,EACA,SAAU7Y,EAAQD,GKnxDxB,GAAA+Y,EAGAA,GAAA,WACA,MAAA1Y,QAGA,KAEA0Y,KAAAC,SAAA,qBAAAC,MAAA,QACC,MAAAjP,GAED,gBAAAkP,UACAH,EAAAG,QAOAjZ,EAAAD,QAAA+Y,GL0xDMI,GACA,SAAUlZ,EAAQD,EAASO,GAEjC,YAGAY,QAAOC,eAAepB,EAAS,cAC7BgD,OAAO,GMrzDT,IAAA2T,GAAApW,EAAA,GN0zDAP,GAAQoC,QAAUuU,EAAYvT,WAC9BnD,EAAOD,QAAUA,EAAiB,SAI5BoZ,EACA,SAAUnZ,EAAQD,GO3yDxB,QAAAqZ,KACAhZ,KAAA6D,QAAA7D,KAAA6D,YACA7D,KAAAiZ,cAAAjZ,KAAAiZ,mBAAAjW,GAwQA,QAAA8R,GAAAoE,GACA,wBAAAA,GAGA,QAAAC,GAAAD,GACA,sBAAAA,GAGA,QAAAE,GAAAF,GACA,sBAAAA,IAAA,OAAAA,EAGA,QAAAG,GAAAH,GACA,gBAAAA,EAnRAtZ,EAAAD,QAAAqZ,EAGAA,iBAEAA,EAAAzX,UAAAsC,YAAAb,GACAgW,EAAAzX,UAAA0X,kBAAAjW,GAIAgW,EAAAM,oBAAA,GAIAN,EAAAzX,UAAAgY,gBAAA,SAAApY,GACA,IAAAgY,EAAAhY,MAAA,GAAAqY,MAAArY,GACA,KAAAgB,WAAA,8BAEA,OADAnC,MAAAiZ,cAAA9X,EACAnB,MAGAgZ,EAAAzX,UAAA8N,KAAA,SAAAsE,GACA,GAAA8F,GAAAC,EAAAC,EAAAC,EAAAvZ,EAAAwZ,CAMA,IAJA7Z,KAAA6D,UACA7D,KAAA6D,YAGA,UAAA8P,KACA3T,KAAA6D,QAAA0J,OACA6L,EAAApZ,KAAA6D,QAAA0J,SAAAvN,KAAA6D,QAAA0J,MAAA/J,QAAA,CAEA,IADAiW,EAAAxP,UAAA,aACAI,OACA,KAAAoP,EAGA,IAAAtI,GAAA,GAAA9G,OAAA,yCAAAoP,EAAA,IAEA,MADAtI,GAAAf,QAAAqJ,EACAtI,EAOA,GAFAuI,EAAA1Z,KAAA6D,QAAA8P,GAEA0F,EAAAK,GACA,QAEA,IAAA5E,EAAA4E,GACA,OAAAzP,UAAAzG,QAEA,OACAkW,EAAAnZ,KAAAP,KACA,MACA,QACA0Z,EAAAnZ,KAAAP,KAAAiK,UAAA,GACA,MACA,QACAyP,EAAAnZ,KAAAP,KAAAiK,UAAA,GAAAA,UAAA,GACA,MAEA,SACA2P,EAAAE,MAAAvY,UAAAkT,MAAAlU,KAAA0J,UAAA,GACAyP,EAAAK,MAAA/Z,KAAA4Z,OAEG,IAAAR,EAAAM,GAIH,IAHAE,EAAAE,MAAAvY,UAAAkT,MAAAlU,KAAA0J,UAAA,GACA4P,EAAAH,EAAAjF,QACAkF,EAAAE,EAAArW,OACAnD,EAAA,EAAeA,EAAAsZ,EAAStZ,IACxBwZ,EAAAxZ,GAAA0Z,MAAA/Z,KAAA4Z,EAGA,WAGAZ,EAAAzX,UAAAyY,YAAA,SAAArG,EAAAsG,GACA,GAAAzZ,EAEA,KAAAsU,EAAAmF,GACA,KAAA9X,WAAA,8BA2CA,OAzCAnC,MAAA6D,UACA7D,KAAA6D,YAIA7D,KAAA6D,QAAAqW,aACAla,KAAAqP,KAAA,cAAAsE,EACAmB,EAAAmF,YACAA,cAEAja,KAAA6D,QAAA8P,GAGAyF,EAAApZ,KAAA6D,QAAA8P,IAEA3T,KAAA6D,QAAA8P,GAAAF,KAAAwG,GAGAja,KAAA6D,QAAA8P,IAAA3T,KAAA6D,QAAA8P,GAAAsG,GANAja,KAAA6D,QAAA8P,GAAAsG,EASAb,EAAApZ,KAAA6D,QAAA8P,MAAA3T,KAAA6D,QAAA8P,GAAAwG,SAIA3Z,EAHA6Y,EAAArZ,KAAAiZ,eAGAD,EAAAM,oBAFAtZ,KAAAiZ,gBAKAzY,EAAA,GAAAR,KAAA6D,QAAA8P,GAAAnQ,OAAAhD,IACAR,KAAA6D,QAAA8P,GAAAwG,QAAA,EACAC,QAAA7M,MAAA,mIAGAvN,KAAA6D,QAAA8P,GAAAnQ,QACA,kBAAA4W,SAAAC,OAEAD,QAAAC,SAKAra,MAGAgZ,EAAAzX,UAAA0V,GAAA+B,EAAAzX,UAAAyY,YAEAhB,EAAAzX,UAAA+Y,KAAA,SAAA3G,EAAAsG,GAMA,QAAAvB,KACA1Y,KAAAua,eAAA5G,EAAA+E,GAEA8B,IACAA,GAAA,EACAP,EAAAF,MAAA/Z,KAAAiK,YAVA,IAAA6K,EAAAmF,GACA,KAAA9X,WAAA,8BAEA,IAAAqY,IAAA,CAcA,OAHA9B,GAAAuB,WACAja,KAAAiX,GAAAtD,EAAA+E,GAEA1Y,MAIAgZ,EAAAzX,UAAAgZ,eAAA,SAAA5G,EAAAsG,GACA,GAAAQ,GAAAC,EAAAlX,EAAAnD,CAEA,KAAAyU,EAAAmF,GACA,KAAA9X,WAAA,8BAEA,KAAAnC,KAAA6D,UAAA7D,KAAA6D,QAAA8P,GACA,MAAA3T,KAMA,IAJAya,EAAAza,KAAA6D,QAAA8P,GACAnQ,EAAAiX,EAAAjX,OACAkX,GAAA,EAEAD,IAAAR,GACAnF,EAAA2F,EAAAR,WAAAQ,EAAAR,mBACAja,MAAA6D,QAAA8P,GACA3T,KAAA6D,QAAA0W,gBACAva,KAAAqP,KAAA,iBAAAsE,EAAAsG,OAEG,IAAAb,EAAAqB,GAAA,CACH,IAAApa,EAAAmD,EAAoBnD,KAAA,GACpB,GAAAoa,EAAApa,KAAA4Z,GACAQ,EAAApa,GAAA4Z,UAAAQ,EAAApa,GAAA4Z,aAAA,CACAS,EAAAra,CACA,OAIA,GAAAqa,EAAA,EACA,MAAA1a,KAEA,KAAAya,EAAAjX,QACAiX,EAAAjX,OAAA,QACAxD,MAAA6D,QAAA8P,IAEA8G,EAAAE,OAAAD,EAAA,GAGA1a,KAAA6D,QAAA0W,gBACAva,KAAAqP,KAAA,iBAAAsE,EAAAsG,GAGA,MAAAja,OAGAgZ,EAAAzX,UAAAqZ,mBAAA,SAAAjH,GACA,GAAAjQ,GAAAmW,CAEA,KAAA7Z,KAAA6D,QACA,MAAA7D,KAGA,KAAAA,KAAA6D,QAAA0W,eAKA,MAJA,KAAAtQ,UAAAzG,OACAxD,KAAA6D,WACA7D,KAAA6D,QAAA8P,UACA3T,MAAA6D,QAAA8P,GACA3T,IAIA,QAAAiK,UAAAzG,OAAA,CACA,IAAAE,IAAA1D,MAAA6D,QACA,mBAAAH,GACA1D,KAAA4a,mBAAAlX,EAIA,OAFA1D,MAAA4a,mBAAA,kBACA5a,KAAA6D,WACA7D,KAKA,GAFA6Z,EAAA7Z,KAAA6D,QAAA8P,GAEAmB,EAAA+E,GACA7Z,KAAAua,eAAA5G,EAAAkG,OACG,IAAAA,EAEH,KAAAA,EAAArW,QACAxD,KAAAua,eAAA5G,EAAAkG,IAAArW,OAAA,GAIA,cAFAxD,MAAA6D,QAAA8P,GAEA3T,MAGAgZ,EAAAzX,UAAAsY,UAAA,SAAAlG,GAQA,MANA3T,MAAA6D,SAAA7D,KAAA6D,QAAA8P,GAEAmB,EAAA9U,KAAA6D,QAAA8P,KACA3T,KAAA6D,QAAA8P,IAEA3T,KAAA6D,QAAA8P,GAAAc,YAIAuE,EAAAzX,UAAAsZ,cAAA,SAAAlH,GACA,GAAA3T,KAAA6D,QAAA,CACA,GAAAiX,GAAA9a,KAAA6D,QAAA8P,EAEA,IAAAmB,EAAAgG,GACA,QACA,IAAAA,EACA,MAAAA,GAAAtX,OAEA,UAGAwV,EAAA6B,cAAA,SAAAE,EAAApH,GACA,MAAAoH,GAAAF,cAAAlH,KPw1DMqH,EACA,SAAUpb,EAAQD,EAASO,GAEjC,cAC4B,SAAS0B,GQxnE9B,QAASgJ,GAAWjI,EAAOsY,GAChC,MAAwC,KAAjCtY,EAAMuY,YAAYD,EAAQ,GAG5B,QAASpF,GAASlT,GACvB,WAAcK,KAAVL,GAAiC,OAAVA,IAGH,gBAAVA,IAAsBA,YAAiBwY,SAGhD,QAASrG,GAAWnS,GACzB,WAAcK,KAAVL,GAAiC,OAAVA,GAGH,kBAAVA,GAGT,QAASqH,GAAIoR,EAAOxB,GACzB,GAAIhY,EAAOwY,QAAS,CAClB,GAAMiB,GAASzZ,EAAOwY,QAAQgB,EAE1BtG,GAAWuG,IACbA,EAAOtB,MAAMnY,EAAOwY,QAASR,IAK5B,QAAS1O,GAAQoQ,EAAMC,EAAKC,GACjC,GAAMC,GAAS,GAAM/L,KAAKE,SACpB3E,EAAWyE,KAAK6L,IAAIC,EAAKD,EAAM7L,KAAKgM,IAAI,EAAGJ,EAAO,GAExD,OAAO5L,MAAKiM,OAAO,EAAIF,GAAUxQ,GAG5B,QAASiI,GAAY7K,GAC1B,MAAO,SAAWA,IAAuB,OAAfA,EAAKkF,MRslEjCzM,OAAOC,eAAepB,EAAS,cAC7BgD,OAAO,IAEThD,EQ7nEgBiL,aR8nEhBjL,EQ1nEgBkW,WR2nEhBlW,EQpnEgBmV,aRqnEhBnV,EQ9mEgBqK,MR+mEhBrK,EQrmEgBuL,URsmEhBvL,EQ/lEgBuT,gBRsoEa3S,KAAKZ,EAASO,EAAoB","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._subs = {};\n    _this._lastPubUID = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isAuthBatching = false;\n    _this._authChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingInterval = null;\n    _this._pongTimeout = null;\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._credentials = null;\n    _this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      retry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      resubscribe: true,\n      ping: true,\n      pingInterval: 30000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 3000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      authEndpoint: '/centrifuge/auth',\n      authHeaders: {},\n      authParams: {},\n      onAuth: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setCredentials',\n    value: function setCredentials(credentials) {\n      this._credentials = credentials;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n\n      this._debug('sending AJAX request to', url);\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback(true, 'JSON returned was invalid, yet status code was 200. Data was: ' + xhr.responseText);\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback(false, _data);\n            }\n          } else {\n            _this2._log(\"Couldn't get auth info from application\", xhr.status);\n            callback(true, xhr.status);\n          }\n        }\n      };\n\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      Object.assign(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.retry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback(this._createErrorObject('disconnected'));\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._unsubscribedAt = new Date();\n            }\n            sub._setSubscribing();\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      if (!this._config.resubscribe || !this._reconnect) {\n        // completely clear connected state\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return;\n      }\n      if (!this._transport) {\n        throw new Error('transport not connected');\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        this._transport = new WebSocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n        _this3._reconnecting = false;\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        _this3._resetRetry();\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._credentials || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._credentials) {\n          msg.params.credentials = _this3._credentials;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (result) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, result));\n        }, function () {\n          _this3._disconnect('connect error', true);\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = 'connection closed';\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n            needReconnect = reason !== 'disconnect';\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              _this3._connect();\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        var replies = _this3._decoder.decodeReplies(event.data);\n        for (var i in replies) {\n          if (replies.hasOwnProperty(i)) {\n            _this3._debug('Received reply', replies[i]);\n            _this3._dispatchReply(replies[i]);\n          }\n        }\n        _this3._restartPing();\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      var _this4 = this;\n\n      var msg = {\n        method: this._methodType.RPC,\n        params: {\n          data: data\n        }\n      };\n      return this._call(msg).then(function (result) {\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, result);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      return this._callAsync(msg);\n    }\n  }, {\n    key: '_callAsync',\n    value: function _callAsync(msg) {\n      this._addMessage(msg, true);\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        var id = _this5._addMessage(msg);\n        _this5._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      if (this._isDisconnected()) {\n        return;\n      }\n\n      this._debug('disconnected:', reason, shouldReconnect);\n\n      var reconnect = shouldReconnect || false;\n\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      if (!this._isDisconnected()) {\n        this._setStatus('disconnected');\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n        }\n        if (this._reconnecting === false) {\n          this.emit('disconnect', {\n            reason: reason,\n            reconnect: reconnect\n          });\n        }\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this6 = this;\n\n      // ask web app for connection parameters - user ID,\n      // timestamp, info and token\n      this._debug('refresh credentials');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      var cb = function cb(error, data) {\n        if (error === true) {\n          // We don't perform any connection status related actions here as we are\n          // relying on Centrifugo that must close connection eventually.\n          _this6._debug('error getting connection credentials from refresh endpoint', data);\n          _this6._numRefreshFailed++;\n          if (_this6._refreshTimeout) {\n            clearTimeout(_this6._refreshTimeout);\n          }\n          if (_this6._config.refreshAttempts !== null && _this6._numRefreshFailed >= _this6._config.refreshAttempts) {\n            _this6._refreshFailed();\n            return;\n          }\n          var interval = _this6._config.refreshInterval + Math.round(Math.random() * 1000);\n          _this6._refreshTimeout = setTimeout(function () {\n            return _this6._refresh();\n          }, interval);\n          return;\n        }\n        _this6._numRefreshFailed = 0;\n        if (_this6._credentials === null) {\n          return;\n        }\n        _this6._credentials.user = data.user;\n        _this6._credentials.exp = data.exp;\n        if ('info' in data) {\n          _this6._credentials.info = data.info;\n        }\n        _this6._credentials.sign = data.sign;\n        if (_this6._isDisconnected()) {\n          _this6._debug('credentials refreshed, connect from scratch');\n          _this6._connect();\n        } else {\n          _this6._debug('send refreshed credentials');\n\n          var msg = {\n            method: _this6._methodType.REFRESH,\n            params: {\n              credentials: _this6._credentials\n            }\n          };\n\n          _this6._call(msg).then(function (result) {\n            _this6._refreshResponse(_this6._decoder.decodeCommandResult(_this6._methodType.REFRESH, result));\n          }, function () {\n            _this6._disconnect('refresh error', true);\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n      }\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub) {\n      var _this7 = this;\n\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing();\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel\n        if (this._isAuthBatching) {\n          this._authChannels[channel] = true;\n        } else {\n          this.startAuthBatching();\n          this._subscribe(sub);\n          this.stopAuthBatching();\n        }\n      } else {\n        var recover = this._recover(sub);\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var last = this._getLastID(channel);\n          if (last !== '') {\n            msg.params.last = last;\n          }\n          var away = sub._getAway();\n          if (away !== 0) {\n            msg.params.away = away;\n          }\n        }\n\n        this._call(msg).then(function (result) {\n          _this7._subscribeResponse(channel, _this7._decoder.decodeCommandResult(_this7._methodType.SUBSCRIBE, result));\n        }, function (err) {\n          _this7._subscribeError(err);\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result) {\n      var _this8 = this;\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      if (result.expires) {\n        var isExpired = result.expired;\n\n        if (isExpired) {\n          this._reconnecting = true;\n          this._disconnect('expired', true);\n          this._refresh();\n          return;\n        }\n      }\n      this._clientID = result.client;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this8._refresh();\n        }, result.ttl * 1000);\n      }\n\n      if (this._config.resubscribe) {\n        this.startBatching();\n        this.startAuthBatching();\n        for (var channel in this._subs) {\n          if (this._subs.hasOwnProperty(channel)) {\n            var sub = this._subs[channel];\n            if (sub._shouldResubscribe()) {\n              this._subscribe(sub);\n            }\n          }\n        }\n        this.stopAuthBatching();\n        this.stopBatching(true);\n      }\n\n      this._restartPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n      }\n      if (this._pingInterval !== null) {\n        clearInterval(this._pingInterval);\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this9 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingInterval = setInterval(function () {\n        if (!_this9.isConnected()) {\n          _this9._stopPing();\n          return;\n        }\n        _this9.ping();\n        _this9._pongTimeout = setTimeout(function () {\n          _this9._disconnect('no ping', true);\n        }, _this9._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, result) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      var recovered = false;\n\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n\n      if (pubs && pubs.length > 0) {\n        // handle missed pubs.\n        pubs = pubs.reverse();\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      } else {\n        if ('last' in result) {\n          // no missed messages found so set last message id from result.\n          this._lastPubUID[channel] = result.last;\n        }\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback(result);\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          return;\n        }\n        errback(reply.error);\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('join', join);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('leave', leave);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.unsubscribe();\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      // keep last uid received from channel.\n      this._lastPubUID[channel] = pub.uid;\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('publish', pub);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this10 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n      if (result.expires) {\n        var expired = result.expired;\n\n        if (expired) {\n          var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n          this._refreshTimeout = setTimeout(function () {\n            return _this10._refresh();\n          }, interval);\n          return;\n        }\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this10._refresh();\n        }, result.ttl * 1000);\n      }\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        this._handleUnsub(channel);\n      }\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        return;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply);\n      } else {\n        this._handlePush(reply.result);\n      }\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      this._addMessage({\n        method: this._methodType.PING\n      });\n    }\n  }, {\n    key: '_recover',\n    value: function _recover(sub) {\n      return sub._unsubscribedAt !== null;\n    }\n  }, {\n    key: '_getLastID',\n    value: function _getLastID(channel) {\n      var lastUID = this._lastPubUID[channel];\n\n      if (lastUID) {\n        this._debug('last uid found and sent for channel', channel);\n        return lastUID;\n      }\n      this._debug('no last uid found for channel', channel);\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this11 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this11._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback(_this11._createErrorObject(_errorTimeout));\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message, async) {\n      var id = void 0;\n      if (!async) {\n        id = this._nextMessageId();\n        message.id = id;\n      }\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      if (!async) {\n        return id;\n      }\n      return 0;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching(flush) {\n      // stop collecting messages\n      flush = flush || false;\n      this._isBatching = false;\n      if (flush === true) {\n        this.flush();\n      }\n    }\n  }, {\n    key: 'flush',\n    value: function flush() {\n      // send batched messages to Centrifuge\n      this._flush();\n    }\n  }, {\n    key: 'startAuthBatching',\n    value: function startAuthBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to authEndpoint when stopAuthBatching will be called\n      this._isAuthBatching = true;\n    }\n  }, {\n    key: 'stopAuthBatching',\n    value: function stopAuthBatching() {\n      var _this12 = this;\n\n      // create request to authEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isAuthBatching = false;\n      var authChannels = this._authChannels;\n\n      this._authChannels = {};\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var cb = function cb(error, data) {\n        if (error === true) {\n          _this12._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel = channels[i];\n              _this12._subscribeResponse({\n                error: 'authorization request failed',\n                body: { channel: _channel }\n              });\n            }\n          }\n          return;\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this12._isBatching) {\n          _this12.startBatching();\n          batch = true;\n        }\n\n        for (var _i in channels) {\n          if (channels.hasOwnProperty(_i)) {\n            var _ret = function () {\n              var channel = channels[_i];\n              var channelResponse = data[channel];\n\n              if (!channelResponse) {\n                // subscription:error\n                _this12._subscribeResponse({\n                  error: 'channel not found in authorization response',\n                  body: { channel: channel }\n                });\n                return 'continue';\n              }\n              if (!channelResponse.status || channelResponse.status === 200) {\n                var msg = {\n                  method: _this12._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    client: _this12._clientID,\n                    info: channelResponse.info,\n                    sign: channelResponse.sign\n                  }\n                };\n\n                var _sub = _this12._getSub(channel);\n                if (_sub === null) {\n                  return 'continue';\n                }\n\n                var recover = _this12._recover(_sub);\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var last = _this12._getLastID(channel);\n                  if (last !== '') {\n                    msg.params.last = last;\n                  }\n                  var away = _sub._getAway();\n                  if (away !== 0) {\n                    msg.params.away = away;\n                  }\n                }\n                _this12._call(msg).then(function (result) {\n                  _this12._subscribeResponse(channel, _this12._decoder.decodeCommandResult(_this12._methodType.SUBSCRIBE, result));\n                }, function (err) {\n                  _this12._subscribeError(channel, err);\n                });\n              } else {\n                _this12._subscribeResponse({\n                  error: channelResponse.status,\n                  body: { channel: channel }\n                });\n              }\n            }();\n\n            if (_ret === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this12.stopBatching(true);\n        }\n      };\n\n      if (this._config.onAuth !== null) {\n        this._config.onAuth({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.authEndpoint, this._config.authParams, this._config.authHeaders, data, cb);\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      if (arguments.length < 1) {\n        throw new Error('Illegal arguments number: required 1, got ' + arguments.length);\n      }\n      if (!(0, _utils.isString)(channel)) {\n        throw new Error('Illegal argument type: channel must be a string');\n      }\n      if (!this._config.resubscribe && !this.isConnected()) {\n        throw new Error('Can not only subscribe in connected state when resubscribe option is off');\n      }\n\n      var currentSub = this._getSub(channel);\n\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._recovered = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._unsubscribedAt = null;\n    _this._setEvents(events);\n    _this._initializePromise();\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      });\n    }\n  }, {\n    key: '_getAway',\n    value: function _getAway() {\n      var now = new Date();\n      return Math.round((now - this._unsubscribedAt) / 1000) + Math.round(this._centrifuge._config.timeout / 1000);\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing() {\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n        this._isResubscribe = true;\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._recovered = recovered;\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._unsubscribedAt = null;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n\n      this.emit('error', errContext);\n      this._reject(errContext);\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._noResubscribe = true;\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext() {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: this._recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._unsubscribedAt = null;\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      return this._subscriptionPromise.then(function () {\n        return _this3._centrifuge._call(message);\n      }).then(function (result) {\n        return _this3._centrifuge._decoder.decodeCommandResult(type, result);\n      });\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isString = isString;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isString(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'string' || value instanceof String;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6dd89c1548d27b8d62ec","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  isString,\n  log,\n  startsWith,\n  errorExists,\n  backoff\n} from './utils';\n\nconst _errorTimeout = 'timeout';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._subs = {};\n    this._lastPubUID = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isAuthBatching = false;\n    this._authChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingInterval = null;\n    this._pongTimeout = null;\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._credentials = null;\n    this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      retry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      resubscribe: true,\n      ping: true,\n      pingInterval: 30000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 3000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      authEndpoint: '/centrifuge/auth',\n      authHeaders: {},\n      authParams: {},\n      onAuth: null\n    };\n    this._configure(options);\n  }\n\n  setCredentials(credentials) {\n    this._credentials = credentials;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n\n    this._debug('sending AJAX request to', url);\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback(true, 'JSON returned was invalid, yet status code was 200. Data was: ' + xhr.responseText);\n          }\n          if (parsed) { // prevents double execution.\n            callback(false, data);\n          }\n        } else {\n          this._log(\"Couldn't get auth info from application\", xhr.status);\n          callback(true, xhr.status);\n        }\n      }\n    };\n\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    Object.assign(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.retry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback(this._createErrorObject('disconnected'));\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._unsubscribedAt = new Date();\n          }\n          sub._setSubscribing();\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    if (!this._config.resubscribe || !this._reconnect) {\n      // completely clear connected state\n      this._subs = {};\n    }\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return;\n    }\n    if (!this._transport) {\n      throw new Error('transport not connected');\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      this._transport = new WebSocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n      this._reconnecting = false;\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      this._resetRetry();\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._credentials || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._credentials) {\n        msg.params.credentials = this._credentials;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(result => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, result));\n      }, () => {\n        this._disconnect('connect error', true);\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = 'connection closed';\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n          needReconnect = reason !== 'disconnect';\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            this._connect();\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      const replies = this._decoder.decodeReplies(event.data);\n      for (const i in replies) {\n        if (replies.hasOwnProperty(i)) {\n          this._debug('Received reply', replies[i]);\n          this._dispatchReply(replies[i]);\n        }\n      }\n      this._restartPing();\n    };\n  };\n\n  rpc(data) {\n    const msg = {\n      method: this._methodType.RPC,\n      params: {\n        data: data\n      }\n    };\n    return this._call(msg).then(result => this._decoder.decodeCommandResult(this._methodType.RPC, result));\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    return this._callAsync(msg);\n  }\n\n  _callAsync(msg) {\n    this._addMessage(msg, true);\n  }\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    if (this._isDisconnected()) {\n      return;\n    }\n\n    this._debug('disconnected:', reason, shouldReconnect);\n\n    const reconnect = shouldReconnect || false;\n\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    if (!this._isDisconnected()) {\n      this._setStatus('disconnected');\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n      if (this._reconnecting === false) {\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask web app for connection parameters - user ID,\n    // timestamp, info and token\n    this._debug('refresh credentials');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    const cb = (error, data) => {\n      if (error === true) {\n        // We don't perform any connection status related actions here as we are\n        // relying on Centrifugo that must close connection eventually.\n        this._debug('error getting connection credentials from refresh endpoint', data);\n        this._numRefreshFailed++;\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      if (this._credentials === null) {\n        return;\n      }\n      this._credentials.user = data.user;\n      this._credentials.exp = data.exp;\n      if ('info' in data) {\n        this._credentials.info = data.info;\n      }\n      this._credentials.sign = data.sign;\n      if (this._isDisconnected()) {\n        this._debug('credentials refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed credentials');\n\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            credentials: this._credentials\n          }\n        };\n\n        this._call(msg).then(result => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, result));\n        }, () => {\n          this._disconnect('refresh error', true);\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n    }\n  };\n\n  _subscribe(sub) {\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing();\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel\n      if (this._isAuthBatching) {\n        this._authChannels[channel] = true;\n      } else {\n        this.startAuthBatching();\n        this._subscribe(sub);\n        this.stopAuthBatching();\n      }\n    } else {\n      const recover = this._recover(sub);\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const last = this._getLastID(channel);\n        if (last !== '') {\n          msg.params.last = last;\n        }\n        const away = sub._getAway();\n        if (away !== 0) {\n          msg.params.away = away;\n        }\n      }\n\n      this._call(msg).then(result => {\n        this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n      }, err => {\n        this._subscribeError(err);\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _connectResponse(result) {\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    if (result.expires) {\n      const isExpired = result.expired;\n\n      if (isExpired) {\n        this._reconnecting = true;\n        this._disconnect('expired', true);\n        this._refresh();\n        return;\n      }\n    }\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n\n    if (this._config.resubscribe) {\n      this.startBatching();\n      this.startAuthBatching();\n      for (const channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          const sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub);\n          }\n        }\n      }\n      this.stopAuthBatching();\n      this.stopBatching(true);\n    }\n\n    this._restartPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n    }\n    if (this._pingInterval !== null) {\n      clearInterval(this._pingInterval);\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    let recovered = false;\n\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n\n    if (pubs && pubs.length > 0) {\n      // handle missed pubs.\n      pubs = pubs.reverse();\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    } else {\n      if ('last' in result) {\n        // no missed messages found so set last message id from result.\n        this._lastPubUID[channel] = result.last;\n      }\n    }\n  };\n\n  _handleReply(reply) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback(result);\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        return;\n      }\n      errback(reply.error);\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('join', join);\n  };\n\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('leave', leave);\n  };\n\n  _handleUnsub(channel) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.unsubscribe();\n  };\n\n  _handlePublication(channel, pub) {\n    // keep last uid received from channel.\n    this._lastPubUID[channel] = pub.uid;\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('publish', pub);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    if (result.expires) {\n      const expired = result.expired;\n\n      if (expired) {\n        const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n  };\n\n  _handlePush(data) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      this._handleUnsub(channel);\n    }\n  }\n\n  _dispatchReply(reply) {\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      return;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply);\n    } else {\n      this._handlePush(reply.result);\n    }\n  };\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    this._addMessage({\n      method: this._methodType.PING\n    });\n  };\n\n  _recover(sub) {\n    return sub._unsubscribedAt !== null;\n  };\n\n  _getLastID(channel) {\n    const lastUID = this._lastPubUID[channel];\n\n    if (lastUID) {\n      this._debug('last uid found and sent for channel', channel);\n      return lastUID;\n    }\n    this._debug('no last uid found for channel', channel);\n    return '';\n\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback(this._createErrorObject(_errorTimeout));\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message, async) {\n    let id;\n    if (!async) {\n      id = this._nextMessageId();\n      message.id = id;\n    }\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    if (!async) {\n      return id;\n    }\n    return 0;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching(flush) {\n    // stop collecting messages\n    flush = flush || false;\n    this._isBatching = false;\n    if (flush === true) {\n      this.flush();\n    }\n  };\n\n  flush() {\n    // send batched messages to Centrifuge\n    this._flush();\n  };\n\n  startAuthBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to authEndpoint when stopAuthBatching will be called\n    this._isAuthBatching = true;\n  };\n\n  stopAuthBatching() {\n    // create request to authEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isAuthBatching = false;\n    const authChannels = this._authChannels;\n\n    this._authChannels = {};\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const cb = (error, data) => {\n      if (error === true) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeResponse({\n              error: 'authorization request failed',\n              body: {channel}\n            });\n          }\n        }\n        return;\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const channelResponse = data[channel];\n\n          if (!channelResponse) {\n            // subscription:error\n            this._subscribeResponse({\n              error: 'channel not found in authorization response',\n              body: {channel}\n            });\n            continue;\n          }\n          if (!channelResponse.status || channelResponse.status === 200) {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel,\n                client: this._clientID,\n                info: channelResponse.info,\n                sign: channelResponse.sign\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = this._recover(sub);\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const last = this._getLastID(channel);\n              if (last !== '') {\n                msg.params.last = last;\n              }\n              const away = sub._getAway();\n              if (away !== 0) {\n                msg.params.away = away;\n              }\n            }\n            this._call(msg).then(result => {\n              this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n            }, err => {\n              this._subscribeError(channel, err);\n            });\n          } else {\n            this._subscribeResponse({\n              error: channelResponse.status,\n              body: {channel}\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching(true);\n      }\n\n    };\n\n    if (this._config.onAuth !== null) {\n      this._config.onAuth({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.authEndpoint, this._config.authParams, this._config.authHeaders, data, cb);\n    }\n  };\n\n  subscribe(channel, events) {\n    if (arguments.length < 1) {\n      throw new Error('Illegal arguments number: required 1, got ' + arguments.length);\n    }\n    if (!isString(channel)) {\n      throw new Error('Illegal argument type: channel must be a string');\n    }\n    if (!this._config.resubscribe && !this.isConnected()) {\n      throw new Error('Can not only subscribe in connected state when resubscribe option is off');\n    }\n\n    const currentSub = this._getSub(channel);\n\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._recovered = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._unsubscribedAt = null;\n    this._setEvents(events);\n    this._initializePromise();\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    });\n  };\n\n  _getAway() {\n    const now = new Date();\n    return Math.round((now - this._unsubscribedAt) / 1000) + Math.round(this._centrifuge._config.timeout / 1000);\n  }\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing() {\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n      this._isResubscribe = true;\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._recovered = recovered;\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._unsubscribedAt = null;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n\n    this.emit('error', errContext);\n    this._reject(errContext);\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._noResubscribe = true;\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext() {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: this._recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._unsubscribedAt = null;\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    return this._subscriptionPromise\n      .then(() => this._centrifuge._call(message))\n      .then(result => this._centrifuge._decoder.decodeCommandResult(type, result))\n    ;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isString(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'string' || value instanceof String;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}